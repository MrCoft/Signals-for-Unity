// using Sirenix.OdinInspector;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace Coft.AssetCollection
{
    [CreateAssetMenu(menuName = "Unity Sample project/Utils/Asset Collection")]
    public class AssetCollection : ScriptableObject
    {
#if UNITY_EDITOR
        // [OnValueChanged(nameof(Regenerate))]
#endif
        public string SearchQuery;

        // [InlineEditor]
        public AssetCollectionData Data;
        public bool EnableAutoGeneration = true;

        public List<T> GetAssets<T>()
        {
            return Data.Assets.OfType<T>().ToList();
        }

#if UNITY_EDITOR
        [InitializeOnLoadMethod]
        private static void RegenerateAll()
        {
            // NOTE: Runs in Editor after compilation, before pressing Play, and during build
            var results = AssetDatabase.FindAssets($"t:{nameof(AssetCollection)}");
            foreach (var guid in results)
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                var obj = AssetDatabase.LoadAssetAtPath<AssetCollection>(path);
                if (obj.EnableAutoGeneration)
                {
                    obj.Regenerate();
                }
            }
        }

        private void OnGUI()
        {
            // if (GUILayout.Button("Regenerate"))
            if (GUI.Button(new Rect(10, 10, 150, 100), "I am a button"))
            {
                Regenerate();
            }
        }
        
        // [Button(nameof(Regenerate))]
        public void Regenerate()
        {
            var path = AssetDatabase.GetAssetPath(this);
            var dataPath = Path.Combine(
                Path.GetDirectoryName(path),
                $"{Path.GetFileNameWithoutExtension(path)} Data.AutoGenerated.asset"
            );
            if (Data == null)
            {
                Data = CreateInstance<AssetCollectionData>();
                Data.Collection = this;
                AssetDatabase.CreateAsset(Data, dataPath);

                var objAssetText = File.ReadAllText(path);
                var dataGuid = Regex.Match(objAssetText, $"{nameof(Data)}: {{(?:.+?), guid: (.+?), (?:.+?)}}");
                if (dataGuid.Success == false)
                {
                    AssetDatabase.RemoveObjectFromAsset(this);
                    AssetDatabase.CreateAsset(this, path);
                }
                else
                {
                    var dataMetaPath = AssetDatabase.GetTextMetaFilePathFromAssetPath(dataPath);
                    var dataMetaText = File.ReadAllText(dataMetaPath);
                    dataMetaText = Regex.Replace(dataMetaText, "(guid: )(.+?)$", $"${{1}}{dataGuid.Groups[1]}",
                        RegexOptions.Multiline);
                    File.WriteAllText(dataMetaPath, dataMetaText);
                    Data = AssetDatabase.LoadAssetAtPath<AssetCollectionData>(dataPath);
                }
            }

            Data.Regenerate();
        }
#endif
    }
}
